react 生命周期:https://www.jianshu.com/p/4784216b8194
react mobx 一看就懂 https://blog.csdn.net/u012125579/article/details/69400169
mobx http://eyehere.net/2016/mobx-getting-started/
mobx demo :https://github.com/Hancoson/react-mobx-demo
redux-thunk & redux-saga 用法及对比 https://segmentfault.com/a/1190000009928167
普通的使用redux-action,
componentWillMount() {//dom生成前,可以setState,只调用一次
        alert("componentWillMount");
    }

    componentDidMount() {//render之后,等于是dom生成,可以setState,只调用一次
        alert("componentDidMount");
    }

    componentWillReceiveProps(nextProps) {//父级改变props之后 的第一步,state改变不会产生这步,可以setState
        alert("componentWillReceiveProps");
    }

    shouldComponentUpdate(nextProps, nextState) {//父级改变props之后 的第二步,可以改为false,让子组件不进行更新,每次调用setState后都会调用shouldComponentUpdate判断是否需要重新渲染组件。当页面不会随着props变化页面布局的时候,不可以setState
        alert("shouldComponentUpdate");
        return true;        // 记得要返回true
    }

    componentWillUpdate() {//父级改变props之后 的第三步,不可以setState
        alert("componentWillUpdate");
    }

    componentDidUpdate() {//父级改变props之后 的第三步之后 会先进入子组件的render,之后到该步,不可以setState
        alert("componentDidUpdate");
    }

    componentWillUnmount() {//组件破坏之前
        alert("componentWillUnmount");
    }
页面初始,会进行componentWillMount,之后render,再componentDidMount
之后如果父级发生改变props,会进行componentWillReceiveProps,如果是state改变就没有之前的, 之后一起进行shouldComponentUpdate判断,通过之后进行componentWillUpdate
,再render,最后componentDidUpdate
